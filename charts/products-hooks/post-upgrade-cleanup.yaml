apiVersion: v1
kind: ServiceAccount
metadata:
  name: cleanup-of-replicas-counts
  namespace: {{ .Values.namespace.name }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"  # Ensure this runs after restore-replicas-counts
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cleanup-of-replicas-counts
  namespace: {{ .Values.namespace.name }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "6"  # Ensure this runs after restore-replicas-counts
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
rules:
- apiGroups: [""]
  resources:
  - configmaps
  verbs:
  - get
  - list
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cleanup-of-replicas-counts
  namespace: {{ .Values.namespace.name }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "7"  # Ensure this runs after restore-replicas-counts
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
subjects:
- kind: ServiceAccount
  name: cleanup-of-replicas-counts
  namespace: {{ .Values.namespace.name }}
roleRef:
  kind: Role
  name: cleanup-of-replicas-counts
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: post-upgrade-cleanup-of-replicas-counts
  namespace: {{ .Values.namespace.name }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "8"  # Ensure this runs after restore-replicas-counts
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  template:
    spec:
      serviceAccountName: cleanup-of-replicas-counts
      containers:
      - name: cleanup-of-replicas-counts
        image: nanda/just-helm-in-docker:v7
        env:
          - name: NAMESPACE
            value: {{ .Values.namespace.name }}
        command:
          - "/bin/bash"
          - "-c"
          - |
            set -o xtrace
            set -o nounset
            set -o pipefail

            # Check if the ConfigMap exists and capture its output
            configmap_output=$(kubectl get configmap replicas-counts --namespace $NAMESPACE --ignore-not-found)
            if [[ -z "$configmap_output" ]]; then
              echo "ConfigMap replicas-counts not found, exiting..."
            else
              echo "ConfigMap replicas-counts exists, proceeding with deleting..."
              kubectl delete configmap replicas-counts -n $NAMESPACE
            fi

            exit 0

      restartPolicy: OnFailure
