environment: worker
namespace:
  name: "products"
# deployments is an array. Hence supports multiple deployments.
deployments:
  - name: products
    podLabels:
      # prometheus.app/port: "8080"
      # prometheus.app/scrape: "true"
    podAnnotations:
      strategy.spinnaker.io/versioned: "false"
    # containers is an array. Hence supports multiple containers.
    containers:
      - name: products
        ports:
          - name: httpport
            value: 8080
            servicePort: 80
            servicePortName: httpport
            # nodePort: 32758
        # containerPortName: httpport
        # containerPort: 8000
        # internalServicePort: 80
        # externalNodePort: 32758
        # servicePortName: httpport
        imageName: nanda/modular-monolith
        imageTag: products-0.1.16
        configMapName: config-plain
        configFileName: config-file
        secretName: secrets-plain
        secretsFileName: secrets-file
        livenessProbe:
          tcpSocket:
            port: 8080
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          timeoutSeconds: 10
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 2
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 200m
            memory: 200Mi
        env:
          - name: "ADD_FUN"
            value: "Yes"
    rollingUpdate:
      maxSurge: "30%"
      maxUnavailable: "20%"
    replicas: 1 # If hpa is defined, defining replicas count here is incorrect. Let hpa totally manage the replicas.
    # terminationGracePeriodSeconds: 60
    trafficWeightPercentage: "100"
  - name: products-baseline
    podLabels:
      # prometheus.app/port: "8080"
      # prometheus.app/scrape: "true"
    podAnnotations:
      strategy.spinnaker.io/versioned: "false"
    # containers is an array. Hence supports multiple containers.
    containers:
      - name: products
        ports:
          - name: httpport
            value: 8080
            servicePort: 80
            servicePortName: httpport
            # nodePort: 32758
        # containerPortName: httpport
        # containerPort: 8000
        # internalServicePort: 80
        # externalNodePort: 32758
        # servicePortName: httpport
        imageName: nanda/modular-monolith
        imageTag: products-0.1.16
        configMapName: config-plain
        configFileName: config-file
        secretName: secrets-plain
        secretsFileName: secrets-file
        livenessProbe:
          tcpSocket:
            port: 8080
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          timeoutSeconds: 10
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 2
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 200m
            memory: 200Mi
        env:
          - name: "ADD_FUN"
            value: "Yes"
    rollingUpdate:
      maxSurge: "30%"
      maxUnavailable: "20%"
    replicas: 0 # If hpa is defined, defining replicas count here is incorrect. Let hpa totally manage the replicas.
    # terminationGracePeriodSeconds: 60
    trafficWeightPercentage: "0"
  - name: products-canary
    podLabels:
      # prometheus.app/port: "8080"
      # prometheus.app/scrape: "true"
    podAnnotations:
      strategy.spinnaker.io/versioned: "false"
    # containers is an array. Hence supports multiple containers.
    containers:
      - name: products
        ports:
          - name: httpport
            value: 8080
            servicePort: 80
            servicePortName: httpport
            # nodePort: 32758
        # containerPortName: httpport
        # containerPort: 8000
        # internalServicePort: 80
        # externalNodePort: 32758
        # servicePortName: httpport
        imageName: nanda/modular-monolith
        imageTag: products-0.1.16
        configMapName: config-plain
        configFileName: config-file
        secretName: secrets-plain
        secretsFileName: secrets-file
        livenessProbe:
          tcpSocket:
            port: 8080
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          timeoutSeconds: 10
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 2
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 200m
            memory: 200Mi
        env:
          - name: "ADD_FUN"
            value: "Yes"
    rollingUpdate:
      maxSurge: "30%"
      maxUnavailable: "20%"
    replicas: 0 # If hpa is defined, defining replicas count here is incorrect. Let hpa totally manage the replicas.
    # terminationGracePeriodSeconds: 60
    trafficWeightPercentage: "0"
configMaps:
  - name: config-plain
    data:
      ADD_FUN: "yes"
configFiles:
  - name: config-file
    file: config.json
    mountPath: /service/config.json
# NOTE: secrets are part of values-secrets.yaml
requiredInfraDependencies:
  name: app-infra
  values:
    # NOTE: All the below values are interpreted from values-infra-secrets-<env>.yaml
    # MYSQL_HOST: $MY_MASTER_DATABASE_HOST
    MYSQL_HOST: $MY_DATABASE_HOST
    MYSQL_PORT: $MY_DATABASE_PORT
    SERVICE_A: $SERVICE_A
# NOTE: nodeLabels renders the nodeSelector block.
# nodeAffinityLabels, although can be used as an alternative to `nodeSelector`, is much more powerful than `nodeSelector`.
# nodeLabels:
#   environment: worker

# custom-resources
crons:
  - name: custom-cron
    timing: "* * * * */5"
  - name: custom-cron-2
    timing: "* * * * */3"
